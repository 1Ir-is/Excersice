package com.example.server.service.impl;

import com.example.server.dto.GPTMessage;
import com.example.server.dto.GPTRequestDTO;
import com.example.server.dto.GPTResponseDTO;
import com.example.server.model.Campaign;
import com.example.server.model.Topic;
import com.example.server.service.GPTService;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Arrays;
import java.util.concurrent.CompletableFuture;

@Service
@Slf4j
@ConditionalOnProperty(name = "app.gpt.mock.enabled", havingValue = "false")
public class GPTServiceImpl implements GPTService {

    @Value("${openai.api.key}")
    private String openaiApiKey;

    @Value("${openai.api.url}")
    private String openaiApiUrl;

    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;

    public GPTServiceImpl(RestTemplate restTemplate, ObjectMapper objectMapper) {
        this.restTemplate = restTemplate;
        this.objectMapper = objectMapper;
        log.info("üáªüá≥ Vietnamese GPTService initialized for user 1Ir-is at 2025-08-07 07:54:54");
    }

    @Override
    public CompletableFuture<String> generateTopicsFromCampaign(Campaign campaign, Integer numberOfTopics, String additionalInstructions) {
        try {
            log.info("üáªüá≥ Generating {} Vietnamese topics for campaign '{}' for user 1Ir-is", numberOfTopics, campaign.getName());

            String prompt = buildVietnameseTopicGenerationPrompt(campaign, numberOfTopics, additionalInstructions);

            GPTRequestDTO requestDTO = new GPTRequestDTO();
            requestDTO.setModel("gpt-3.5-turbo");
            requestDTO.setMax_tokens(1500); // Increase for Vietnamese content
            requestDTO.setTemperature(0.7);
            requestDTO.setMessages(Arrays.asList(
                    new GPTMessage("system",
                            "B·∫°n l√† m·ªôt chuy√™n gia marketing ng∆∞·ªùi Vi·ªát Nam v·ªõi 10 nƒÉm kinh nghi·ªám. " +
                                    "B·∫°n hi·ªÉu r√µ th·ªã tr∆∞·ªùng Vi·ªát Nam, vƒÉn h√≥a, ng√¥n ng·ªØ v√† h√†nh vi ti√™u d√πng. " +
                                    "H√£y t·∫°o c√°c ch·ªß ƒë·ªÅ marketing b·∫±ng ti·∫øng Vi·ªát thu·∫ßn t√∫y, ph√π h·ª£p v·ªõi ng∆∞·ªùi Vi·ªát. " +
                                    "QUAN TR·ªåNG: Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, kh√¥ng d√πng ti·∫øng Anh."
                    ),
                    new GPTMessage("user", prompt)
            ));

            GPTResponseDTO responseDTO = callGPTAPI(requestDTO).get();
            String content = responseDTO.getChoices().get(0).getMessage().getContent();

            log.info("‚úÖ Successfully generated Vietnamese topics for user 1Ir-is");
            log.debug("Generated content: {}", content);

            return CompletableFuture.completedFuture(content);

        } catch (Exception e) {
            log.error("‚ùå Error generating Vietnamese topics for user 1Ir-is: {}", e.getMessage(), e);
            throw new RuntimeException("Kh√¥ng th·ªÉ t·∫°o ra c√°c ch·ªß ƒë·ªÅ ti·∫øng Vi·ªát", e);
        }
    }

    @Override
    public CompletableFuture<String> generateContentFromTopic(Topic topic, String tone, String contentType, String additionalInstructions) {
        try {
            log.info("üáªüá≥ Generating Vietnamese {} content for topic '{}' for user 1Ir-is",
                    contentType, topic.getName());

            String prompt = buildVietnameseContentGenerationPrompt(topic, tone, contentType, additionalInstructions);

            GPTRequestDTO requestDTO = new GPTRequestDTO();
            requestDTO.setModel("gpt-3.5-turbo");
            requestDTO.setMax_tokens(1000);
            requestDTO.setTemperature(0.8);
            requestDTO.setMessages(Arrays.asList(
                    new GPTMessage("system",
                            "B·∫°n l√† m·ªôt copywriter chuy√™n nghi·ªáp ng∆∞·ªùi Vi·ªát Nam, chuy√™n t·∫°o n·ªôi dung marketing ti·∫øng Vi·ªát. " +
                                    "B·∫°n vi·∫øt theo phong c√°ch ng∆∞·ªùi Vi·ªát, s·ª≠ d·ª•ng t·ª´ ng·ªØ th√¢n thi·ªán, d·ªÖ hi·ªÉu. " +
                                    "QUAN TR·ªåNG: Ch·ªâ vi·∫øt b·∫±ng ti·∫øng Vi·ªát, kh√¥ng d√πng ti·∫øng Anh tr·ª´ khi c·∫ßn thi·∫øt cho hashtag."
                    ),
                    new GPTMessage("user", prompt)
            ));

            GPTResponseDTO responseDTO = callGPTAPI(requestDTO).get();
            String content = responseDTO.getChoices().get(0).getMessage().getContent();

            log.info("‚úÖ Successfully generated Vietnamese content for user 1Ir-is");
            return CompletableFuture.completedFuture(content);

        } catch (Exception e) {
            log.error("‚ùå Error generating Vietnamese content for user 1Ir-is: {}", e.getMessage(), e);
            throw new RuntimeException("Kh√¥ng th·ªÉ t·∫°o n·ªôi dung ti·∫øng Vi·ªát", e);
        }
    }

    @Override
    public CompletableFuture<String> generateImagePromptFromContent(String content) {
        try {
            log.info("üáªüá≥ Generating image prompt for Vietnamese content for user 1Ir-is");

            String prompt = String.format(
                    "T·∫°o m·ªôt prompt chi ti·∫øt b·∫±ng TI·∫æNG ANH ƒë·ªÉ generate h√¨nh ·∫£nh minh h·ªça cho n·ªôi dung marketing ti·∫øng Vi·ªát sau:\n\n" +
                            "N·ªòI DUNG: %s\n\n" +
                            "Y√äU C·∫¶U CHO PROMPT:\n" +
                            "- M√¥ t·∫£ h√¨nh ·∫£nh b·∫±ng ti·∫øng Anh chuy√™n nghi·ªáp\n" +
                            "- Phong c√°ch hi·ªán ƒë·∫°i, ph√π h·ª£p v·ªõi th·ªã tr∆∞·ªùng Vi·ªát Nam\n" +
                            "- M√†u s·∫Øc: xanh d∆∞∆°ng (#1976d2), tr·∫Øng, x√°m nh·∫π\n" +
                            "- Composition cho social media (16:9 ho·∫∑c 1:1)\n" +
                            "- Professional, clean, modern style\n" +
                            "- Avoid text in image\n\n" +
                            "CH·ªà TR·∫¢ V·ªÄ PROMPT TI·∫æNG ANH, KH√îNG GI·∫¢I TH√çCH TH√äM:",
                    content
            );

            GPTRequestDTO requestDTO = new GPTRequestDTO();
            requestDTO.setModel("gpt-3.5-turbo");
            requestDTO.setMax_tokens(300);
            requestDTO.setTemperature(0.6);
            requestDTO.setMessages(Arrays.asList(
                    new GPTMessage("system",
                            "B·∫°n l√† chuy√™n gia t·∫°o prompt cho AI image generation. " +
                                    "H√£y t·∫°o prompt ti·∫øng Anh ng·∫Øn g·ªçn, ch√≠nh x√°c cho DALL-E ho·∫∑c Midjourney."
                    ),
                    new GPTMessage("user", prompt)
            ));

            GPTResponseDTO responseDTO = callGPTAPI(requestDTO).get();
            String imagePrompt = responseDTO.getChoices().get(0).getMessage().getContent();

            log.info("‚úÖ Successfully generated image prompt for user 1Ir-is");
            return CompletableFuture.completedFuture(imagePrompt);

        } catch (Exception e) {
            log.error("‚ùå Error generating image prompt for user 1Ir-is: {}", e.getMessage(), e);
            throw new RuntimeException("Kh√¥ng th·ªÉ t·∫°o image prompt", e);
        }
    }

    @Override
    public CompletableFuture<GPTResponseDTO> callGPTAPI(GPTRequestDTO request) {
        try {
            log.debug("üîÑ Calling OpenAI API for user 1Ir-is with model: {}", request.getModel());

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.setBearerAuth(openaiApiKey);

            HttpEntity<GPTRequestDTO> entity = new HttpEntity<>(request, headers);
            ResponseEntity<GPTResponseDTO> response = restTemplate.postForEntity(openaiApiUrl, entity, GPTResponseDTO.class);

            GPTResponseDTO responseBody = response.getBody();
            if (responseBody != null && responseBody.getUsage() != null) {
                log.info("üìä Token usage for user 1Ir-is: {} total tokens",
                        responseBody.getUsage().getTotal_tokens());
            }

            return CompletableFuture.completedFuture(responseBody);

        } catch (Exception e) {
            log.error("‚ùå OpenAI API call failed for user 1Ir-is: {}", e.getMessage(), e);
            throw new RuntimeException("Kh√¥ng th·ªÉ g·ªçi OpenAI API", e);
        }
    }

    private String buildVietnameseTopicGenerationPrompt(Campaign campaign, Integer numberOfTopics, String additionalInstruction) {
        StringBuilder prompt = new StringBuilder();

        prompt.append("üéØ NHI·ªÜM V·ª§: T·∫°o ").append(numberOfTopics).append(" ch·ªß ƒë·ªÅ marketing b·∫±ng TI·∫æNG VI·ªÜT cho chi·∫øn d·ªãch sau:\n\n");

        prompt.append("üìã TH√îNG TIN CHI·∫æN D·ªäCH:\n");
        prompt.append("‚Ä¢ T√™n chi·∫øn d·ªãch: ").append(campaign.getName()).append("\n");
        prompt.append("‚Ä¢ M√¥ t·∫£: ").append(campaign.getDescription()).append("\n\n");

        if (additionalInstruction != null && !additionalInstruction.trim().isEmpty()) {
            prompt.append("üéØ Y√äU C·∫¶U ƒê·∫∂C BI·ªÜT:\n");
            prompt.append("‚Ä¢ ").append(additionalInstruction).append("\n\n");
        }

        prompt.append("üáªüá≥ Y√äU C·∫¶U CHO CH·ª¶ ƒê·ªÄ:\n");
        prompt.append("‚Ä¢ Vi·∫øt ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát\n");
        prompt.append("‚Ä¢ Ph√π h·ª£p v·ªõi vƒÉn h√≥a v√† th·ªã tr∆∞·ªùng Vi·ªát Nam\n");
        prompt.append("‚Ä¢ D·ªÖ hi·ªÉu, g·∫ßn g≈©i v·ªõi ng∆∞·ªùi Vi·ªát\n");
        prompt.append("‚Ä¢ C√≥ t√≠nh ·ª©ng d·ª•ng th·ª±c t·∫ø cao\n");
        prompt.append("‚Ä¢ Trending v√† thu h√∫t\n");
        prompt.append("‚Ä¢ Ph√π h·ª£p v·ªõi m·∫°ng x√£ h·ªôi Vi·ªát Nam\n\n");

        prompt.append("üìù ƒê·ªäNH D·∫†NG TR·∫¢ V·ªÄ (CH√çNH X√ÅC):\n");
        prompt.append("{\n");
        prompt.append("  \"topics\": [\n");
        prompt.append("    {\n");
        prompt.append("      \"name\": \"T√™n ch·ªß ƒë·ªÅ ti·∫øng Vi·ªát ng·∫Øn g·ªçn v√† h·∫•p d·∫´n\",\n");
        prompt.append("      \"description\": \"M√¥ t·∫£ chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát v·ªÅ c√°ch tri·ªÉn khai ch·ªß ƒë·ªÅ, bao g·ªìm key message v√† ph∆∞∆°ng ph√°p ti·∫øp c·∫≠n\"\n");
        prompt.append("    }\n");
        prompt.append("  ]\n");
        prompt.append("}\n\n");

        prompt.append("‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG:\n");
        prompt.append("- CH·ªà s·ª≠ d·ª•ng ti·∫øng Vi·ªát cho name v√† description\n");
        prompt.append("- Kh√¥ng d·ªãch m√°y, h√£y vi·∫øt t·ª± nhi√™n nh∆∞ ng∆∞·ªùi Vi·ªát\n");
        prompt.append("- T√™n ch·ªß ƒë·ªÅ kh√¥ng qu√° 60 k√Ω t·ª±\n");
        prompt.append("- M√¥ t·∫£ chi ti·∫øt 100-200 k√Ω t·ª±\n");
        prompt.append("- ƒê·∫£m b·∫£o JSON format ch√≠nh x√°c\n");

        return prompt.toString();
    }

    private String buildVietnameseContentGenerationPrompt(Topic topic, String tone, String contentType, String additionalInstructions) {
        StringBuilder prompt = new StringBuilder();

        String vietnameseTone = mapToneToVietnamese(tone);
        String vietnameseContentType = mapContentTypeToVietnamese(contentType);

        prompt.append("üéØ NHI·ªÜM V·ª§: T·∫°o n·ªôi dung ").append(vietnameseContentType).append(" b·∫±ng TI·∫æNG VI·ªÜT\n\n");

        prompt.append("üìã TH√îNG TIN CH·ª¶ ƒê·ªÄ:\n");
        prompt.append("‚Ä¢ Ch·ªß ƒë·ªÅ: ").append(topic.getName()).append("\n");
        prompt.append("‚Ä¢ M√¥ t·∫£: ").append(topic.getDescription()).append("\n");
        prompt.append("‚Ä¢ Tone: ").append(vietnameseTone).append("\n");
        prompt.append("‚Ä¢ Lo·∫°i n·ªôi dung: ").append(vietnameseContentType).append("\n\n");

        if (additionalInstructions != null && !additionalInstructions.trim().isEmpty()) {
            prompt.append("üéØ Y√äU C·∫¶U ƒê·∫∂C BI·ªÜT:\n");
            prompt.append("‚Ä¢ ").append(additionalInstructions).append("\n\n");
        }

        prompt.append("üáªüá≥ Y√äU C·∫¶U N·ªòI DUNG:\n");
        prompt.append("‚Ä¢ Vi·∫øt ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n\n");
        prompt.append("‚Ä¢ Hook m·∫°nh m·∫Ω ƒë·ªÉ thu h√∫t ng∆∞·ªùi ƒë·ªçc\n");
        prompt.append("‚Ä¢ Th√¥ng ƒëi·ªáp r√µ r√†ng v√† c√≥ gi√° tr·ªã\n");
        prompt.append("‚Ä¢ Call-to-action c·ª• th·ªÉ b·∫±ng ti·∫øng Vi·ªát\n");
        prompt.append("‚Ä¢ S·ª≠ d·ª•ng emoji ph√π h·ª£p\n");
        prompt.append("‚Ä¢ Hashtags ti·∫øng Vi·ªát v√† ti·∫øng Anh ph√π h·ª£p\n");
        prompt.append("‚Ä¢ Phong c√°ch giao ti·∫øp th√¢n thi·ªán v·ªõi ng∆∞·ªùi Vi·ªát\n");
        prompt.append("‚Ä¢ ƒê·ªô d√†i: 150-300 t·ª´\n\n");

        prompt.append("üí° G·ª¢I √ù C·∫§U TR√öC:\n");
        prompt.append("1. Hook thu h√∫t (emoji + c√¢u m·ªü ƒë·∫ßu ·∫•n t∆∞·ª£ng)\n");
        prompt.append("2. N·ªôi dung ch√≠nh (gi√° tr·ªã + l·ª£i √≠ch)\n");
        prompt.append("3. Call-to-action r√µ r√†ng\n");
        prompt.append("4. Hashtags ph√π h·ª£p\n\n");

        prompt.append("‚ö†Ô∏è QUAN TR·ªåNG: Vi·∫øt nh∆∞ m·ªôt ng∆∞·ªùi Vi·ªát ƒëang n√≥i chuy·ªán, kh√¥ng d·ªãch m√°y!");

        return prompt.toString();
    }

    private String mapToneToVietnamese(String tone) {
        if (tone == null) return "chuy√™n nghi·ªáp v√† th√¢n thi·ªán";

        return switch (tone.toLowerCase()) {
            case "professional" -> "chuy√™n nghi·ªáp v√† uy t√≠n";
            case "casual" -> "th√¢n thi·ªán v√† g·∫ßn g≈©i";
            case "enthusiastic" -> "h√†o h·ª©ng v√† nƒÉng ƒë·ªông";
            case "informative" -> "h·ªØu √≠ch v√† gi√°o d·ª•c";
            case "promotional" -> "khuy·∫øn m√£i v√† h·∫•p d·∫´n";
            case "inspirational" -> "truy·ªÅn c·∫£m h·ª©ng v√† t√≠ch c·ª±c";
            default -> "chuy√™n nghi·ªáp v√† th√¢n thi·ªán";
        };
    }

    private String mapContentTypeToVietnamese(String contentType) {
        if (contentType == null) return "b√†i ƒëƒÉng m·∫°ng x√£ h·ªôi";

        return switch (contentType.toLowerCase()) {
            case "social_post" -> "b√†i ƒëƒÉng m·∫°ng x√£ h·ªôi";
            case "article" -> "b√†i vi·∫øt chi ti·∫øt";
            case "promotion" -> "n·ªôi dung khuy·∫øn m√£i";
            case "story" -> "story/reel ng·∫Øn";
            case "email" -> "email marketing";
            case "blog" -> "blog post";
            default -> "b√†i ƒëƒÉng m·∫°ng x√£ h·ªôi";
        };
    }
}