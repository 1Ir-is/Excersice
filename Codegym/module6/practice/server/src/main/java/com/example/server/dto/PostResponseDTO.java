package com.example.server.dto;

import com.example.server.enums.PostStatus;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Schema(description = "Enhanced post response with complete content details for user 1Ir-is")
public class PostResponseDTO {

    @Schema(description = "Post ID", example = "48")
    private Long id;

    @Schema(description = "Associated topic ID", example = "35")
    private Long topicId;

    @Schema(description = "User ID who owns this post", example = "1")
    private Long userId;

    @Schema(description = "Social media channel ID", example = "1")
    private Long socialChannelId;

    // ========== CONTENT FIELDS ==========
    @Schema(description = "Post title", example = "🚀 AI Thay Đổi Cách Làm Việc - Bạn Đã Sẵn Sàng?")
    private String title;

    @Schema(description = "Complete post content in Vietnamese", example = "Trí tuệ nhân tạo không còn là tương lai xa vời...")
    private String contentText;

    @Schema(description = "Generated image URL", example = "https://placeholder.ai/generated_1691405468123.jpg")
    private String contentImageUrl;

    @Schema(description = "Image generation prompt", example = "Modern Vietnamese office with AI technology, professional photography style")
    private String imagePrompt;

    // ========== GENERATION METADATA ==========
    @Schema(description = "Whether content was generated by AI", example = "true")
    private Boolean aiGenerated = true;

    @Schema(description = "Content tone used", example = "professional")
    private String contentTone;

    @Schema(description = "Content type used", example = "long_article")
    private String contentType;

    @Schema(description = "Content type display name", example = "Bài viết dài chuyên sâu")
    private String contentTypeDisplayName;

    @Schema(description = "Target platform", example = "linkedin")
    private String targetPlatform;

    @Schema(description = "Target audience", example = "business_owners")
    private String targetAudience;

    @Schema(description = "Industry focus", example = "technology")
    private String industry;

    // ========== CONTENT METRICS ==========
    @Schema(description = "Word count", example = "1247")
    private Integer wordCount;

    @Schema(description = "Estimated reading time in minutes", example = "6")
    private Integer readingTime;

    @Schema(description = "Estimated engagement score", example = "8.5")
    private Double engagementScore;

    @Schema(description = "Extracted hashtags", example = "#AI #ChuyenDoiSo #DoanhNghiepVietNam")
    private String hashtags;

    @Schema(description = "Target word count for generation", example = "1200")
    private Integer targetWordCount;

    @Schema(description = "Is this long-form content", example = "true")
    private Boolean isLongForm;

    // ========== STATUS & SCHEDULING ==========
    @Schema(description = "Current post status")
    private PostStatus status = PostStatus.DRAFT;

    @Schema(description = "Scheduled publication time")
    private LocalDateTime scheduledTime;

    @Schema(description = "Actual publication time")
    private LocalDateTime publishedTime;

    // ========== AUDIT FIELDS ==========
    @Schema(description = "Content creation timestamp")
    private LocalDateTime createdAt;

    @Schema(description = "Last update timestamp")
    private LocalDateTime updatedAt;

    @Schema(description = "User who created this post", example = "1Ir-is")
    private String createdBy;

    @Schema(description = "AI generation timestamp")
    private LocalDateTime generationTimestamp;

    // ========== RELATIONSHIPS ==========
    @Schema(description = "Associated topic information")
    private TopicResponseDTO topic;

    @Schema(description = "Associated social channel information")
    private SocialChannelResponseDTO socialChannel;

    // ========== CALCULATED FIELDS ==========
    @Schema(description = "Time since creation", example = "2 hours ago")
    private String timeAgo;

    @Schema(description = "Status display name", example = "Bản nháp")
    private String statusDisplayName;

    @Schema(description = "Generation performance metrics")
    private PostMetricsDTO metrics;

    // ========== HELPER METHODS ==========
    public void calculateDerivedFields() {
        this.isLongForm = this.wordCount != null && this.wordCount > 500;
        this.contentTypeDisplayName = getContentTypeDisplayName();
        this.statusDisplayName = getStatusDisplayName();
        this.timeAgo = calculateTimeAgo();
    }

    private String getContentTypeDisplayName() {
        if (contentType == null) return "Bài đăng mạng xã hội";

        return switch (contentType.toLowerCase()) {
            case "social_post" -> "Bài đăng mạng xã hội";
            case "long_article" -> "Bài viết dài chuyên sâu";
            case "blog_post" -> "Blog post chi tiết";
            case "detailed_guide" -> "Hướng dẫn chi tiết";
            case "white_paper" -> "Báo cáo chuyên môn";
            case "case_study" -> "Nghiên cứu tình huống";
            default -> "Nội dung marketing";
        };
    }

    private String getStatusDisplayName() {
        if (status == null) return "Không xác định";

        return switch (status) {
            case DRAFT -> "Bản nháp";
            case SCHEDULED -> "Đã lên lịch";
            case PUBLISHED -> "Đã xuất bản";
            case FAILED -> "Thất bại";
            case CANCELLED -> "Đã hủy";
        };
    }

    private String calculateTimeAgo() {
        if (createdAt == null) return "Không xác định";

        LocalDateTime now = LocalDateTime.now();
        long minutes = java.time.Duration.between(createdAt, now).toMinutes();

        if (minutes < 1) return "Vừa xong";
        if (minutes < 60) return minutes + " phút trước";

        long hours = minutes / 60;
        if (hours < 24) return hours + " giờ trước";

        long days = hours / 24;
        return days + " ngày trước";
    }
}